name: 'Create TFSTATE S3 Bucket'
on:
    workflow_dispatch:
        inputs:
            target_directory:
                description: 'The directory to lint with TFLint'
                required: true
                default: 'Terraform_AWS_Services/terraform-state-s3-locking-bucket'

env:
    AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
    AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
    AWS_REGION: "${{ vars.AWS_REGION }}"
  ## ...
  
jobs:
    Terraform:
        name: 'S3 State Bucket'
        runs-on: ubuntu-24.04
        environment: production
        defaults:
            run:
                shell: bash
                #working-directory: ../../Terraform_AWS_Services/terraform-state-s3-locking-bucket
        steps:
        - name: Checkout
          uses: actions/checkout@v4
           # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
   # Lint:
    #    name: Lint Terraform Files
    #    runs-on: ubuntu-24.04
    #    steps:     
        - name: Cache plugin dir
          uses: actions/cache@v4
          with:
            path: ~/.tflint.d/plugins
            key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}
        - name: Setup TFLint
          uses: terraform-linters/setup-tflint@v4
          with:
            tflint_version: v0.52.0
        - name: 'Show version'
          run: tflint --version
        - name: Init TFLint
          run: tflint --init
          env:
              # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
            GITHUB_TOKEN: ${{ github.token }}
        - name: Run TFLint on specific directory
          run: tflint --chdir=Terraform_AWS_Services/terraform-state-s3-locking-bucket -f compact

        - name: Terraform Init
          id: tf-ini
          run: terraform init
          working-directory: ${{ inputs.target_directory }}

        # Checks that all Terraform configuration files adhere to a canonical format
        - name: Terraform Format
          id: tf-fmt
          run: terraform fmt -check
          working-directory: ${{ inputs.target_directory }}
        # Checks that all Terraform configuration files are correctly written
        - name: Terraform Validate
          id: tf-validate
          run: terraform validate -no-color
          working-directory: ${{ inputs.target_directory }}
        # Generates an execution plan for Terraform
        - name: Terraform Plan
          id: tfplan
          working-directory: ${{ inputs.target_directory }}
          shell: bash
          run: |
            echo 'plan<<EOF' >> $GITHUB_OUTPUT
            terraform plan -no-color -out=tfplan >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
        - name: Terraform Plan Status
          if: steps.tfplan.outcome == 'failure'
          run: exit 1
         # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
        - name: Terraform Plan
          id: tf-plan
          run: |
           export exitcode=0
           terraform plan -destroy -var-file=settings/$ENV/variables.tfvars -detailed-exitcode -no-color -out tfplan || export exitcode=$?

           echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

           if [ $exitcode -eq 1 ]; then
             echo Terraform Plan Failed!
             exit 1
           else 
              exit 0
           fi

      
            # On push to "main", build or change infrastructure according to Terraform configuration files
            # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
        - name: Terraform Apply
          working-directory: ${{ inputs.target_directory }}
          run: terraform apply -auto-approve -input=false tfplan
       
        